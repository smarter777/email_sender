service: jji-contact
useDotenv: true
package:
  individually: true
provider:
  name: aws
  runtime: nodejs18.x
  tracing:
    lambda: true
  region: eu-north-1
  memorySize: 1024
  timeout: 90
  stage: development
  iam:
    role: ExecutionRole
  environment:

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  webpack:
    webpackConfig: "webpack.config.js"
    packager: "npm"
    includeModules: true
  serverless-offline:
    httpPort: 4000
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
  stage: ${opt:stage, self:provider.stage}
  bucket: ${self:service}-${self:provider.stage}
  customDomain:
    domainName: www.saas-app.com
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
  optimize:
    external:
      - aws-jwt-verify

functions:
  contactEmail:
    role: DynamoDBRole
    handler: api/contact/index.handler
    description: POST /api/conatct
    events:
      - http:
          path: /api/conatct
          method: post
          cors:
            origin: "*"
            header: ${self:custom.allowedHeaders}
resources:
  Resources:
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:custom.stage}-execution-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
          - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        Policies:
          - PolicyName: ${self:service}-${self:custom.stage}-execution-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - s3:*
                  Resource:
                    - "arn:aws:s3:::${self:custom.bucket}/*"
                    - "*"
                - Effect: "Allow"
                  Action:
                    - cognito-idp:*
                  Resource:
                    - "*"
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    DynamoDBRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:custom.stage}-dynamodb-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:custom.stage}-dynamodb-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - ses:*
                  Resource:
                    - "*"
